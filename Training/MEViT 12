{"cells":[{"cell_type":"markdown","metadata":{"id":"6z4CZeVOowB4"},"source":["# MEViT\n","\n","This is the 11th iteration of MEViT.\n","\n","In this iteration I have included the following changes:\n","\n","- scale factor of 3x\n","- 5% of dataset\n","- learning rate of .01\n","\n","\n","\n","**NOTE:** Connect to a High-RAM Environment"]},{"cell_type":"markdown","metadata":{"id":"szU0egT7tBFP"},"source":["# Training"]},{"cell_type":"markdown","metadata":{"id":"5mU7Z6Bm3MWK"},"source":["Settings"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1717811954333,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"},"user_tz":420},"id":"-7ruruAJ3Noc","outputId":"88f42d10-31e1-45d5-88b6-2172cce245e3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Name: mevit_model_12\n","Percentage to Load: 5.0%\n","Threshold: 0.5\n","Scale Factor: 4.0\n","Initial Learning Rate: 0.01\n"]}],"source":["# MODEL SETTINGS\n","model_name = 'mevit_model_12'\n","percentage_to_load = 5 / 100.0  # Set the % of dataset to be loaded here.\n","threshold = 0.5  # Set the threshold for metrics here\n","scale_factor = 4.0  # Factor by which to scale images and masks\n","initial_lr = 0.01  # Learning rate at the beginning of training\n","print(f'Model Name: {model_name}')\n","print(f'Percentage to Load: {percentage_to_load*100}%')\n","print(f'Threshold: {threshold}')\n","print(f'Scale Factor: {scale_factor}')\n","print(f'Initial Learning Rate: {initial_lr}')"]},{"cell_type":"markdown","metadata":{"id":"8nAk5_E-pMPE"},"source":["Imports"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23022,"status":"ok","timestamp":1717811977351,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"},"user_tz":420},"id":"YgBD9gDcovEY","outputId":"e80d85ab-01fc-4dcc-ab92-16d155313e15"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /gdrive\n","Num GPUs Available:  1\n"]}],"source":["# Mount Google Drive\n","from google.colab import drive\n","drive.mount('/gdrive')\n","\n","# Imports\n","import os\n","import cv2\n","import numpy as np\n","import tifffile as tiff\n","from sklearn.model_selection import train_test_split\n","import tensorflow as tf\n","from tensorflow.keras import layers, models\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.layers import LayerNormalization, Dense, Dropout, Flatten, Conv2DTranspose\n","from tensorflow.keras.models import Model\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","\n","print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))"]},{"cell_type":"markdown","metadata":{"id":"0Kt6_4oqpOKr"},"source":["Data Loading"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7SO8PR--pASc","outputId":"0a20e233-8ae7-4495-fc24-157c20f59124","executionInfo":{"status":"ok","timestamp":1717812218608,"user_tz":420,"elapsed":241267,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of image files: 4787\n","Number of mask files: 4787\n","Attempting to load 5.0% of dataset: 239 images/mask pairs...\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 239/239 [03:17<00:00,  1.21it/s]"]},{"output_type":"stream","name":"stdout","text":["\n","Loading complete.\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["# Function to count files\n","def count_files(directory, extension=\".tif\"):\n","    return sum(1 for file in os.listdir(directory) if file.endswith(extension))\n","\n","# Paths to your image and mask directories\n","image_directory = '/gdrive/My Drive/Dataset/patches/train/images/'\n","mask_directory = '/gdrive/My Drive/Dataset/patches/train/masks/'\n","\n","# Counting the TIFF files in both directories\n","image_count = count_files(image_directory)\n","mask_count = count_files(mask_directory)\n","\n","print(f\"Number of image files: {image_count}\")\n","print(f\"Number of mask files: {mask_count}\")\n","\n","# Load the images and masks into the lists below\n","images = []\n","masks = []\n","\n","# Sort filenames to ensure matching pairs align\n","image_files = sorted([f for f in os.listdir(image_directory) if f.endswith(\".tif\")])\n","mask_files = sorted([f for f in os.listdir(mask_directory) if f.endswith(\".tif\")])\n","\n","# Determine how many files to load based on percentage\n","number_of_files_to_load = int(len(image_files) * percentage_to_load)\n","\n","# Create a mapping of image names to their corresponding mask names by removing '_Buildings'\n","image_to_mask = {f: f.replace(\"_patch\", \"_Buildings_patch\") for f in image_files}\n","\n","# Only iterate over the subset of files determined by the percentage\n","print(f'Attempting to load {percentage_to_load*100}% of dataset: {number_of_files_to_load} images/mask pairs...')\n","for count, image_name in enumerate(tqdm(image_files[:number_of_files_to_load]), start=1):\n","    try:\n","        img_path = os.path.join(image_directory, image_name)\n","        mask_name = image_to_mask[image_name]\n","        mask_path = os.path.join(mask_directory, mask_name)\n","\n","        if os.path.exists(mask_path):\n","            img = tiff.imread(img_path)\n","            mask = tiff.imread(mask_path)\n","\n","            images.append(img)\n","            masks.append(mask)\n","        else:\n","            print(f'\\nMask not found for image: {image_name}')\n","    except Exception as e:\n","        print(f'\\nError loading image/mask pair {image_name}: {e}')\n","\n","print(\"\\nLoading complete.\")\n","\n","# Check if the number of images and masks loaded are equal\n","if len(images) != len(masks):\n","    raise ValueError(\"The number of loaded images and masks do not match!\")"]},{"cell_type":"markdown","metadata":{"id":"SKX6H6GnpaRB"},"source":["Normalization & Train/Test/Val Split"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"XyWjq5-vpcif","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717812223178,"user_tz":420,"elapsed":4583,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"}},"outputId":"5e844819-c879-422d-a970-94113446a25d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original image shape: (239, 256, 256, 3)\n","New size: (1024, 1024)\n","Resizing images and masks...\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 239/239 [00:00<00:00, 354.48it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Dataset Shapes:\n","X_train: (171, 1024, 1024, 3), y_train: (171, 1024, 1024, 1)\n","X_val:   (20, 1024, 1024, 3), y_val: (20, 1024, 1024, 1)\n","X_test:  (48, 1024, 1024, 3), y_test: (48, 1024, 1024, 1)\n"]}],"source":["# Function to resize and normalize images and masks\n","def preprocess_images_and_masks(images, masks, scale_factor):\n","    # Squeeze unnecessary singleton dimensions\n","    if images.ndim > 3 and images.shape[1] == 1:\n","        images = images.squeeze(axis=1)\n","    if masks.ndim > 3 and masks.shape[1] == 1:\n","        masks = masks.squeeze(axis=1)\n","\n","    print(f\"Original image shape: {images.shape}\")\n","    new_size = (int(images.shape[1] * scale_factor), int(images.shape[2] * scale_factor))\n","    print(f\"New size: {new_size}\")\n","\n","    if new_size[0] <= 0 or new_size[1] <= 0:\n","        raise ValueError(\"Scale factor resulted in invalid size. Check the scale factor and original dimensions.\")\n","\n","    resized_images = []\n","    resized_masks = []\n","    print(\"Resizing images and masks...\")\n","    for img, mask in tqdm(zip(images, masks), total=len(images)):\n","\n","        try:\n","            resized_img = cv2.resize(img, new_size)\n","            resized_mask = cv2.resize(mask, new_size, interpolation=cv2.INTER_NEAREST)\n","            resized_images.append(resized_img)\n","            resized_masks.append(resized_mask)\n","        except Exception as e:\n","            print(f\"Error resizing image/mask pair: {e}\")\n","            raise\n","\n","    resized_images = np.array(resized_images, dtype=np.float32)\n","    resized_masks = np.array(resized_masks, dtype=np.float32)\n","\n","    # Normalize images and masks\n","    resized_images /= 255.0\n","    resized_masks /= 255.0\n","    resized_masks = resized_masks.reshape((-1, new_size[0], new_size[1], 1))\n","\n","    return resized_images, resized_masks\n","\n","# Convert the lists to numpy arrays\n","images = np.array(images, dtype=np.float32)\n","masks = np.array(masks, dtype=np.float32)\n","\n","# Resize and normalize images and masks\n","images, masks = preprocess_images_and_masks(images, masks, scale_factor)\n","\n","# Split the data into training and test sets (80% train, 20% test)\n","X_train, X_test, y_train, y_test = train_test_split(images, masks, test_size=0.2, random_state=1995)\n","\n","# Further split the training set into training and validation sets (90% train, 10% val)\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=1995)\n","\n","# Display the shapes of the datasets to confirm correct dimensions\n","print('Dataset Shapes:')\n","print(f'X_train: {X_train.shape}, y_train: {y_train.shape}')\n","print(f'X_val:   {X_val.shape}, y_val: {y_val.shape}')\n","print(f'X_test:  {X_test.shape}, y_test: {y_test.shape}')"]},{"cell_type":"markdown","metadata":{"id":"85MNZvtrpuar"},"source":["Metrics & Loss"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"MRgTuRcepv8d","colab":{"base_uri":"https://localhost:8080/","height":490},"executionInfo":{"status":"ok","timestamp":1717812281774,"user_tz":420,"elapsed":58601,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"}},"outputId":"a280915c-7a45-47eb-cf58-0d76171254ae"},"outputs":[{"output_type":"stream","name":"stdout","text":["Class weights: {0: 0.5274949720047702, 1: 9.592571542048715}\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["from sklearn.utils.class_weight import compute_class_weight\n","from keras.callbacks import LearningRateScheduler\n","import matplotlib.pyplot as plt\n","\n","# Custom Metrics\n","def dice_coefficient(y_true, y_pred, threshold=threshold):\n","    y_true_f = tf.reshape(y_true, [-1])\n","    y_pred_f = tf.cast(tf.reshape(y_pred, [-1]) > threshold, tf.float32)\n","    intersection = tf.reduce_sum(y_true_f * y_pred_f)\n","    return (2. * intersection + tf.keras.backend.epsilon()) / (tf.reduce_sum(y_true_f) + tf.reduce_sum(y_pred_f) + tf.keras.backend.epsilon())\n","\n","def jaccard_index(y_true, y_pred, threshold=threshold):\n","    y_true_f = tf.reshape(y_true, [-1])\n","    y_pred_f = tf.cast(tf.reshape(y_pred, [-1]) > threshold, tf.float32)\n","    intersection = tf.reduce_sum(y_true_f * y_pred_f)\n","    union = tf.reduce_sum(y_true_f + y_pred_f) - intersection\n","    return (intersection + tf.keras.backend.epsilon()) / (union + tf.keras.backend.epsilon())\n","\n","def sensitivity(y_true, y_pred, threshold=threshold):\n","    y_true_f = tf.reshape(y_true, [-1])\n","    y_pred_f = tf.cast(tf.reshape(y_pred, [-1]) > threshold, tf.float32)\n","    true_positives = tf.reduce_sum(y_true_f * y_pred_f)\n","    possible_positives = tf.reduce_sum(y_true_f)\n","    return true_positives / (possible_positives + tf.keras.backend.epsilon())\n","\n","def specificity(y_true, y_pred, threshold=threshold):\n","    y_true_f = tf.reshape(y_true, [-1])\n","    y_pred_f = tf.cast(tf.reshape(y_pred, [-1]) > threshold, tf.float32)\n","    true_negatives = tf.reduce_sum((1-y_true_f) * (1-y_pred_f))\n","    possible_negatives = tf.reduce_sum(1-y_true_f)\n","    return true_negatives / (possible_negatives + tf.keras.backend.epsilon())\n","\n","def precision(y_true, y_pred, threshold=threshold):\n","    y_true_f = tf.reshape(y_true, [-1])\n","    y_pred_f = tf.cast(tf.reshape(y_pred, [-1]) > threshold, tf.float32)\n","    true_positives = tf.reduce_sum(y_true_f * y_pred_f)\n","    predicted_positives = tf.reduce_sum(y_pred_f)\n","    return true_positives / (predicted_positives + tf.keras.backend.epsilon())\n","\n","# Loss Function\n","def calculate_class_weights(masks):\n","    flat_labels = masks.flatten().astype(int)\n","    class_weights = compute_class_weight(class_weight='balanced', classes=np.unique(flat_labels), y=flat_labels)\n","    class_weights_dict = {i: weight for i, weight in enumerate(class_weights)}\n","    return class_weights_dict\n","\n","def weighted_binary_crossentropy(weights):\n","    def loss(y_true, y_pred):\n","        bce = tf.keras.backend.binary_crossentropy(y_true, y_pred)\n","        weighted_bce = bce * (weights[1] * y_true + weights[0] * (1 - y_true))\n","        return tf.keras.backend.mean(weighted_bce)\n","    return loss\n","\n","# Calculate the class weights for the training masks\n","class_weights = calculate_class_weights(y_train)\n","print(\"Class weights:\", class_weights)\n","\n","# Visualize class weight distribution\n","plt.bar(class_weights.keys(), class_weights.values())\n","plt.title(\"Class Weight Distribution\")\n","plt.xlabel(\"Class\")\n","plt.ylabel(\"Weight\")\n","plt.show()\n","\n","weighted_loss = weighted_binary_crossentropy(class_weights)"]},{"cell_type":"markdown","source":["Model Definition"],"metadata":{"id":"JeXtfUcd5I8o"}},{"cell_type":"code","source":["# Define the MEViT model\n","class TransformerBlock(layers.Layer):\n","    def __init__(self, embed_dim, num_heads, ff_dim, rate=0.1):\n","        super(TransformerBlock, self).__init__()\n","        self.att = layers.MultiHeadAttention(num_heads=num_heads, key_dim=embed_dim)\n","        self.ffn = models.Sequential([\n","            layers.Dense(ff_dim, activation='relu'),\n","            layers.Dense(embed_dim),\n","        ])\n","        self.layernorm1 = layers.LayerNormalization(epsilon=1e-6)\n","        self.layernorm2 = layers.LayerNormalization(epsilon=1e-6)\n","        self.dropout1 = layers.Dropout(rate)\n","        self.dropout2 = layers.Dropout(rate)\n","\n","    def call(self, inputs, training):\n","        attn_output = self.att(inputs, inputs)\n","        attn_output = self.dropout1(attn_output, training=training)\n","        out1 = self.layernorm1(inputs + attn_output)\n","        ffn_output = self.ffn(out1)\n","        ffn_output = self.dropout2(ffn_output, training=training)\n","        return self.layernorm2(out1 + ffn_output)\n","\n","def create_vit_segmentation_model(input_shape, num_classes, embed_dim, num_heads, ff_dim):\n","    inputs = layers.Input(shape=input_shape)\n","    # Flatten the input\n","    x = layers.Reshape((-1, input_shape[-1]))(inputs)\n","\n","    # Create patches and embed\n","    patch_size = 16  # Adjust as necessary based on image size and memory constraints\n","    num_patches = (input_shape[0] // patch_size) * (input_shape[1] // patch_size)\n","    patches = layers.Conv2D(filters=embed_dim, kernel_size=patch_size, strides=patch_size, padding=\"valid\")(inputs)\n","    patches = layers.Reshape((num_patches, embed_dim))(patches)\n","\n","    # Add Transformer blocks\n","    for _ in range(8):\n","        patches = TransformerBlock(embed_dim, num_heads, ff_dim)(patches)\n","\n","    # Reshape back to image\n","    x = layers.Reshape((input_shape[0] // patch_size, input_shape[1] // patch_size, embed_dim))(patches)\n","    x = Conv2DTranspose(num_classes, kernel_size=patch_size, strides=patch_size, padding=\"valid\")(x)\n","    outputs = layers.Activation('sigmoid')(x)\n","\n","    return Model(inputs, outputs)"],"metadata":{"id":"PxguaxwF5HuU","executionInfo":{"status":"ok","timestamp":1717812281775,"user_tz":420,"elapsed":16,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iVA6ln9zp-Ke"},"source":["Model Compilation"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"yOa_BtwAqWNK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717812283309,"user_tz":420,"elapsed":1548,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"}},"outputId":"b53f1be9-93a6-4059-f1d0-618fbb26b4dd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"mevit_model_12\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 1024, 1024, 3)]   0         \n","                                                                 \n"," conv2d (Conv2D)             (None, 64, 64, 64)        49216     \n","                                                                 \n"," reshape_1 (Reshape)         (None, 4096, 64)          0         \n","                                                                 \n"," transformer_block (Transfo  (None, 4096, 64)          83200     \n"," rmerBlock)                                                      \n","                                                                 \n"," transformer_block_1 (Trans  (None, 4096, 64)          83200     \n"," formerBlock)                                                    \n","                                                                 \n"," transformer_block_2 (Trans  (None, 4096, 64)          83200     \n"," formerBlock)                                                    \n","                                                                 \n"," transformer_block_3 (Trans  (None, 4096, 64)          83200     \n"," formerBlock)                                                    \n","                                                                 \n"," transformer_block_4 (Trans  (None, 4096, 64)          83200     \n"," formerBlock)                                                    \n","                                                                 \n"," transformer_block_5 (Trans  (None, 4096, 64)          83200     \n"," formerBlock)                                                    \n","                                                                 \n"," transformer_block_6 (Trans  (None, 4096, 64)          83200     \n"," formerBlock)                                                    \n","                                                                 \n"," transformer_block_7 (Trans  (None, 4096, 64)          83200     \n"," formerBlock)                                                    \n","                                                                 \n"," reshape_2 (Reshape)         (None, 64, 64, 64)        0         \n","                                                                 \n"," conv2d_transpose (Conv2DTr  (None, 1024, 1024, 1)     16385     \n"," anspose)                                                        \n","                                                                 \n"," activation (Activation)     (None, 1024, 1024, 1)     0         \n","                                                                 \n","=================================================================\n","Total params: 731201 (2.79 MB)\n","Trainable params: 731201 (2.79 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}],"source":["from keras.optimizers import SGD\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","input_shape = (int(256 * scale_factor), int(256 * scale_factor), 3)\n","num_classes = 1\n","embed_dim = 64  # Adjust as necessary\n","num_heads = 4   # Adjust as necessary\n","ff_dim = 128    # Adjust as necessary\n","\n","model = create_vit_segmentation_model(input_shape, num_classes, embed_dim, num_heads, ff_dim)\n","model._name = model_name\n","model.summary()\n","\n","# Learning rate schedule\n","def lr_schedule(epoch, lr):\n","    if epoch >= 50 and epoch < 100:\n","        return lr * 0.99\n","    elif epoch >= 100 and epoch < 125:\n","        return lr * 0.9\n","    return lr\n","\n","lr_scheduler = LearningRateScheduler(lr_schedule)\n","\n","# Compile the model\n","sgd = SGD(learning_rate=initial_lr, momentum=0.9)\n","model.compile(\n","    optimizer=sgd,\n","    loss=weighted_loss,\n","    metrics=['accuracy', dice_coefficient, jaccard_index, sensitivity, specificity, precision]\n",")"]},{"cell_type":"markdown","metadata":{"id":"9pd10BmVsJJc"},"source":["Model Training"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"k8N1wpf-sKt8","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"be92c91a-6e3a-43da-ccd4-5c196800b77f","executionInfo":{"status":"error","timestamp":1717812310160,"user_tz":420,"elapsed":26857,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/150\n"]},{"output_type":"error","ename":"ResourceExhaustedError","evalue":"Graph execution error:\n\nDetected at node mevit_model_12/transformer_block/multi_head_attention/einsum/Einsum defined at (most recent call last):\n  File \"/usr/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\n\n  File \"/usr/lib/python3.10/runpy.py\", line 86, in _run_code\n\n  File \"/usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py\", line 37, in <module>\n\n  File \"/usr/local/lib/python3.10/dist-packages/traitlets/config/application.py\", line 992, in launch_instance\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelapp.py\", line 619, in start\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/platform/asyncio.py\", line 195, in start\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 1909, in _run_once\n\n  File \"/usr/lib/python3.10/asyncio/events.py\", line 80, in _run\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 685, in <lambda>\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 738, in _run_callback\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 825, in inner\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 786, in run\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 377, in dispatch_queue\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 250, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 748, in __init__\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 786, in run\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 361, in process_one\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 261, in dispatch_shell\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 539, in execute_request\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py\", line 302, in do_execute\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/zmqshell.py\", line 539, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 2975, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3030, in _run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/async_helpers.py\", line 78, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3257, in run_cell_async\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3473, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n\n  File \"<ipython-input-8-3b98ee7a9ba4>\", line 19, in <cell line: 19>\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1807, in fit\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1401, in train_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1384, in step_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1373, in run_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1150, in train_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 590, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/base_layer.py\", line 1149, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 96, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/functional.py\", line 515, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/functional.py\", line 672, in _run_internal_graph\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/base_layer.py\", line 1149, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 96, in error_handler\n\n  File \"<ipython-input-6-1ccccd26c986>\", line 16, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/base_layer.py\", line 1149, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 96, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/attention/multi_head_attention.py\", line 600, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/attention/multi_head_attention.py\", line 532, in _compute_attention\n\nOOM when allocating tensor with shape[32,4,4096,4096] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node mevit_model_12/transformer_block/multi_head_attention/einsum/Einsum}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:__inference_train_function_14599]","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mResourceExhaustedError\u001b[0m                    Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-3b98ee7a9ba4>\u001b[0m in \u001b[0;36m<cell line: 19>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m# Fit the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m history = model.fit(\n\u001b[0m\u001b[1;32m     20\u001b[0m     \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# Experiment with different values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     54\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mResourceExhaustedError\u001b[0m: Graph execution error:\n\nDetected at node mevit_model_12/transformer_block/multi_head_attention/einsum/Einsum defined at (most recent call last):\n  File \"/usr/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\n\n  File \"/usr/lib/python3.10/runpy.py\", line 86, in _run_code\n\n  File \"/usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py\", line 37, in <module>\n\n  File \"/usr/local/lib/python3.10/dist-packages/traitlets/config/application.py\", line 992, in launch_instance\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelapp.py\", line 619, in start\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/platform/asyncio.py\", line 195, in start\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 1909, in _run_once\n\n  File \"/usr/lib/python3.10/asyncio/events.py\", line 80, in _run\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 685, in <lambda>\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 738, in _run_callback\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 825, in inner\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 786, in run\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 377, in dispatch_queue\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 250, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 748, in __init__\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 786, in run\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 361, in process_one\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 261, in dispatch_shell\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 539, in execute_request\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py\", line 302, in do_execute\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/zmqshell.py\", line 539, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 2975, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3030, in _run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/async_helpers.py\", line 78, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3257, in run_cell_async\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3473, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n\n  File \"<ipython-input-8-3b98ee7a9ba4>\", line 19, in <cell line: 19>\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1807, in fit\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1401, in train_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1384, in step_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1373, in run_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1150, in train_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 590, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/base_layer.py\", line 1149, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 96, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/functional.py\", line 515, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/functional.py\", line 672, in _run_internal_graph\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/base_layer.py\", line 1149, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 96, in error_handler\n\n  File \"<ipython-input-6-1ccccd26c986>\", line 16, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/base_layer.py\", line 1149, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 96, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/attention/multi_head_attention.py\", line 600, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/attention/multi_head_attention.py\", line 532, in _compute_attention\n\nOOM when allocating tensor with shape[32,4,4096,4096] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node mevit_model_12/transformer_block/multi_head_attention/einsum/Einsum}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:__inference_train_function_14599]"]}],"source":["# Setup callbacks\n","early_stopping = EarlyStopping(\n","    monitor='val_dice_coefficient',\n","    patience=30,  # Reduced patience\n","    verbose=1,\n","    mode='max',\n","    restore_best_weights=True\n",")\n","\n","model_checkpoint = ModelCheckpoint(\n","    f'/gdrive/My Drive/Dataset/Models/best_{model_name}',  # Path where the model will be saved\n","    monitor='val_dice_coefficient',  # Save the model based on the maximum dice_coefficient value\n","    verbose=1,\n","    save_best_only=True,\n","    mode='max'\n",")\n","\n","# Fit the model\n","history = model.fit(\n","    X_train, y_train,\n","    batch_size=32,  # Experiment with different values\n","    epochs=150,\n","    verbose=1,\n","    validation_data=(X_val, y_val),\n","    callbacks=[model_checkpoint, early_stopping, lr_scheduler]\n",")\n","\n","# Save the model\n","model.save(f'/gdrive/My Drive/Dataset/Models/{model_name}.h5')"]},{"cell_type":"markdown","metadata":{"id":"XpKxuoOXtGOe"},"source":["# Evaluation"]},{"cell_type":"markdown","metadata":{"id":"eEY45m0AsTyF"},"source":["Evaluation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A3QbrIXpsU9K","executionInfo":{"status":"aborted","timestamp":1717812310162,"user_tz":420,"elapsed":7,"user":{"displayName":"Zachary Luttrell","userId":"00155576860657313600"}}},"outputs":[],"source":["from sklearn.metrics import confusion_matrix, classification_report\n","import seaborn as sns\n","from sklearn.metrics import roc_auc_score\n","\n","from sklearn.metrics import roc_auc_score\n","\n","# Evaluation functions\n","def plot_training_history(history):\n","    plt.figure(figsize=(12, 6))\n","\n","    plt.subplot(1, 2, 1)\n","    plt.plot(history.history['loss'], label='Training Loss')\n","    plt.plot(history.history['val_loss'], label='Validation Loss')\n","    plt.title('Loss Over Epochs')\n","    plt.legend()\n","\n","    plt.subplot(1, 2, 2)\n","    plt.plot(history.history['dice_coefficient'], label='Training Dice Coefficient')\n","    plt.plot(history.history['val_dice_coefficient'], label='Validation Dice Coefficient')\n","    plt.title('Dice Coefficient Over Epochs')\n","    plt.legend()\n","\n","    plt.show()\n","\n","def show_predictions(X, y_true, y_pred, threshold=threshold, num_samples=5):\n","    indices = np.random.choice(range(len(X)), num_samples, replace=False)\n","\n","    for i in indices:\n","        plt.figure(figsize=(12, 6))\n","        plt.subplot(1, 3, 1)\n","        plt.imshow(X[i])\n","        plt.title(f'Original Image [{i}]')\n","        plt.axis('off')\n","\n","        plt.subplot(1, 3, 2)\n","        plt.imshow(y_true[i].squeeze(), cmap='gray')\n","        plt.title(f'True Mask [{i}]')\n","        plt.axis('off')\n","\n","        plt.subplot(1, 3, 3)\n","        plt.imshow(y_pred[i].squeeze() > threshold, cmap='gray')  # Apply a threshold to convert probabilities to binary mask\n","        plt.title(f'Predicted Mask [{i}]')\n","        plt.axis('off')\n","\n","        plt.show()\n","\n","def plot_confusion_matrix(y_true, y_pred, threshold=threshold):\n","    y_true_f = y_true.flatten()\n","    y_pred_f = (y_pred.flatten() > threshold).astype(int)  # Thresholding probabilities\n","\n","    cm = confusion_matrix(y_true_f, y_pred_f)\n","    cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]  # Normalize the confusion matrix\n","\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\n","    plt.xlabel('Predicted')\n","    plt.ylabel('True')\n","    plt.title('Confusion Matrix')\n","\n","    labels = ['True Negative (Correct: No Buildings)', 'False Positive (Incorrect: There Was No Building)', 'False Negative (Incorrect: There Was A Building Here)', 'True Positive (Correct: There Is A Building Here)']\n","    counts = [\"{0:0.0f}\".format(value) for value in cm.flatten()]\n","    percentages = [\"{0:.2%}\".format(value) for value in cm_normalized.flatten()]\n","\n","    labels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in zip(labels, counts, percentages)]\n","    labels = np.asarray(labels).reshape(2, 2)\n","\n","    sns.heatmap(cm, annot=labels, fmt='', cmap='Blues', cbar=False, center=0)\n","    plt.xlabel('Predicted')\n","    plt.ylabel('True')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","# Perform the evaluation\n","plot_training_history(history)\n","y_pred = model.predict(X_test)\n","show_predictions(X_test, y_test, y_pred, threshold=threshold)\n","plot_confusion_matrix(y_test, y_pred, threshold=threshold)\n","print(classification_report(y_test.flatten(), (y_pred.flatten() > threshold).astype(int)))\n","print(\"ROC-AUC:\", roc_auc_score(y_test.flatten(), y_pred.flatten()))"]}],"metadata":{"colab":{"machine_shape":"hm","provenance":[{"file_id":"11cQTe7Eol_kFXnjSdggg1tPfc_nCMFZO","timestamp":1717810201173},{"file_id":"14p7aFNTaI5ZSsc4Y0w4fcY3l6VKxkkFW","timestamp":1717396481877},{"file_id":"1NpShU9m-Nj2D6tCdSxCff3TpL1Y5aKF6","timestamp":1717380265657},{"file_id":"1f1lIddKXevfi94mJs3PuxBxnuM8uZQwo","timestamp":1717380004583},{"file_id":"15BvoeeprCeA1pk7MPCqg6cTM9JuV7IMU","timestamp":1717229218582},{"file_id":"1xDjMyzCNWDd78z51V5LG7-Fb94tRFS6c","timestamp":1717202269266},{"file_id":"1T0bDS1xnUbpTn_HKo-QW-hpHKzAiC40F","timestamp":1717097791182},{"file_id":"1pYfR623jCKtZ1BkOrjZDqoZh0AaLR1dq","timestamp":1717085451334},{"file_id":"1Gyjx9u2SBZzf4fzcEZ-dytx7j6pCy_Tz","timestamp":1717046772304},{"file_id":"16GmAaRyICYXTTeqUaZFMWUtzqK1Fw_nR","timestamp":1717043481212},{"file_id":"1elMNkk0w4e6W0gWUEr4QE6xtozqkygu9","timestamp":1717011460322}],"gpuType":"L4","authorship_tag":"ABX9TyPJDSpUW33txbMqLHw+Ajdx"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}